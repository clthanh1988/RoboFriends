{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","components/CounterButton.js","components/Header.js","containers/App.js","actions.js","constants.js","reducers.js","serviceWorker.js","index.js"],"names":["Card","_ref","id","name","email","react_default","a","createElement","className","alt","src","concat","CardList","cardsArray","robots","map","robot","components_Card","key","SearchBox","searchChange","aria-label","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundry","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","Component","CounterButton","updateCount","count","nextProps","nextState","color","onClick","Header","components_CounterButton","App","onRequestRobots","_this$props","searchField","onSearchChange","isPending","filteredRobots","length","filter","toLowerCase","includes","components_Header","components_SearchBox","components_Scroll","components_ErrorBoundry","components_CardList","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","trim","fetch","then","response","json","data","catch","initialStateSearch","initialStateRobots","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","createLogger","rootReducers","combineReducers","arguments","undefined","action","objectSpread","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"6RAceA,EAZF,SAAAC,GAAuB,IAArBC,EAAqBD,EAArBC,GAAIC,EAAiBF,EAAjBE,KAAMC,EAAWH,EAAXG,MACvB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oDACbH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,SAASC,IAAG,wBAAAC,OAA0BT,EAA1B,mBACrBG,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAKJ,GACLE,EAAAC,EAAAC,cAAA,SAAIH,MCcGQ,EAnBE,SAAAX,GAAc,IACvBY,EADuBZ,EAAZa,OACSC,IAAI,SAAAC,GAC5B,OACEX,EAAAC,EAAAC,cAACU,EAAD,CACEC,IAAKF,EAAMd,GACXA,GAAIc,EAAMd,GACVC,KAAMa,EAAMb,KACZC,MAAOY,EAAMZ,UAKnB,OACEC,EAAAC,EAAAC,cAAA,WACGM,ICDQM,EAdG,SAAAlB,GAAoB,IAAlBmB,EAAkBnB,EAAlBmB,aAClB,OACEf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,SACEc,aAAW,gBACXb,UAAU,mCACVc,KAAK,SACLC,YAAY,gBACZC,SAAUJ,MCIHK,EAZA,SAACC,GACd,OACErB,EAAAC,EAAAC,cAAA,OAAKoB,MAAO,CACVC,SAAU,SACVC,OAAQ,kBACRC,OAAQ,UAEPJ,EAAMK,WCcEC,cApBb,SAAAA,EAAYN,GAAO,IAAAO,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMV,KACDc,MAAQ,CACXC,UAAU,GAHKR,iFAODS,EAAOC,GACvBP,KAAKQ,SAAS,CAAEH,UAAU,qCAK1B,OADqBL,KAAKI,MAAlBC,SAECpC,EAAAC,EAAAC,cAAA,uCAEF6B,KAAKV,MAAMK,gBAjBKc,aCiCZC,cAhCb,SAAAA,IAAc,IAAAb,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAU,IACZb,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAY,GAAAP,KAAAH,QAaFW,YAAc,WACZd,EAAKW,SAAS,SAAAJ,GACZ,MAAO,CAAEQ,MAAOR,EAAMQ,MAAQ,MAdhCf,EAAKO,MAAQ,CACXQ,MAAO,GAHGf,qFAOQgB,EAAWC,GAC/B,OAAId,KAAKI,MAAMQ,QAAUE,EAAUF,uCAanC,OACE3C,EAAAC,EAAAC,cAAA,UACE4C,MAAOf,KAAKV,MAAMyB,MAClBC,QAAShB,KAAKW,aAFhB,UAIUX,KAAKI,MAAMQ,cA3BCH,aCYbQ,mLATX,OACEhD,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAC+C,EAAD,CAAeH,MAAO,gBALTN,aCQfU,qMAEFnB,KAAKV,MAAM8B,mDAGJ,IAAAC,EAOHrB,KAAKV,MALPgC,EAFKD,EAELC,YACAC,EAHKF,EAGLE,eACA7C,EAJK2C,EAIL3C,OACA8C,EALKH,EAKLG,UAIIC,GATCJ,EAMLf,MAGqB5B,EAAOgD,OAAShD,EAAOiD,OAAO,SAAA/C,GACnD,OAAOA,EAAMb,KAAK6D,cAAcC,SAASP,EAAYM,iBAClD,IAEL,OACI3D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACbH,EAAAC,EAAAC,cAAC2D,EAAD,MACA7D,EAAAC,EAAAC,cAAC4D,EAAD,CACE/C,aAAcuC,IAEhBtD,EAAAC,EAAAC,cAAC6D,EAAD,KACGR,EACGvD,EAAAC,EAAAC,cAAA,wBAEFF,EAAAC,EAAAC,cAAC8D,EAAD,KACEhE,EAAAC,EAAAC,cAAC+D,EAAD,CAAUxD,OAAQ+C,cA7BhBhB,cAsDH0B,cAhBS,SAAA/B,GACtB,MAAO,CACLkB,YAAalB,EAAMgC,aAAad,YAChC5C,OAAQ0B,EAAMiC,cAAc3D,OAC5B8C,UAAWpB,EAAMiC,cAAcb,UAC/BlB,MAAOF,EAAMiC,cAAc/B,QAIJ,SAAAgC,GACzB,MAAO,CACLf,eAAgB,SAAAgB,GAAK,OAAID,ECrDU,CACrCpD,KCRiC,sBDSjCsD,QDmDmDD,EAAME,OAAOC,MAAMC,UACpEvB,gBAAiB,kBAAMkB,ECjDQ,SAAAA,GACjCA,EAAS,CAAEpD,KCXyB,2BDYpC0D,MAAM,8CACDC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAI,OAAIV,EAAS,CAAEpD,KCbO,yBDauBsD,QAASQ,MAC/DC,MAAM,SAAA3C,GAAK,OAAIgC,EAAS,CAAEpD,KCbI,wBDayBsD,QAASlC,WDgDxD6B,CAA6ChB,kBG1DtD+B,EAAqB,CACzB5B,YAAa,IAIT6B,EAAqB,CACzBzE,OAAQ,GACR8C,WAAW,EACXlB,MAAO,ICHH8C,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTd,KAAK,SAAAmB,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB9D,QACfyD,UAAUC,cAAcO,YAI1BC,QAAQC,IACN,iHAKEX,GAAUA,EAAOY,UACnBZ,EAAOY,SAASR,KAMlBM,QAAQC,IAAI,sCAGRX,GAAUA,EAAOa,WACnBb,EAAOa,UAAUT,UAO5Bf,MAAM,SAAA3C,GACLgE,QAAQhE,MAAM,4CAA6CA,KCpFlDoE,yBAAf,IACMC,EAAeC,YAAgB,CAACxC,aFKV,WAA6C,IAA5ChC,EAA4CyE,UAAAnD,OAAA,QAAAoD,IAAAD,UAAA,GAAAA,UAAA,GAApC3B,EAAoB6B,EAAgBF,UAAAnD,OAAA,QAAAoD,IAAAD,UAAA,GAAAA,UAAA,GAAP,GAChE,OAAOE,EAAO7F,MACZ,IDpB+B,sBCqB7B,OAAOY,OAAAkF,EAAA,EAAAlF,CAAA,GACFM,EADL,CAEEkB,YAAayD,EAAOvC,UAGxB,QACE,OAAO1C,OAAAkF,EAAA,EAAAlF,CAAA,GACFM,KEfyCiC,cFoBvB,WAA6C,IAA5CjC,EAA4CyE,UAAAnD,OAAA,QAAAoD,IAAAD,UAAA,GAAAA,UAAA,GAApC1B,EAAoB4B,EAAgBF,UAAAnD,OAAA,QAAAoD,IAAAD,UAAA,GAAAA,UAAA,GAAP,GACjE,OAAOE,EAAO7F,MACZ,IDjCkC,yBCkChC,OAAOY,OAAAkF,EAAA,EAAAlF,CAAA,GACFM,EADL,CAEEoB,WAAW,IAGf,IDtCkC,yBC6ClC,ID5CiC,wBC6C3B,OAAO1B,OAAAkF,EAAA,EAAAlF,CAAA,GACFM,EADL,CAEE1B,OAAQqG,EAAOvC,QACfhB,WAAW,IAGnB,QACE,OAAO1B,OAAAkF,EAAA,EAAAlF,CAAA,GACFM,OE3CL6E,EAAQC,YAAYP,EAAcQ,YAAgBC,MAExDC,IAASC,OACTrH,EAAAC,EAAAC,cAACoH,EAAA,EAAD,CAAUN,MAAOA,GACfhH,EAAAC,EAAAC,cAACqH,EAAD,OACWC,SAASC,eAAe,SDG9B,SAAkB9B,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAI8B,IAAIC,eAAwBtC,OAAOC,SAASsC,MACpDC,SAAWxC,OAAOC,SAASuC,OAIvC,OAGFxC,OAAOyC,iBAAiB,OAAQ,WAC9B,IAAMpC,EAAK,GAAApF,OAAMqH,eAAN,sBAEPxC,GAgEV,SAAiCO,EAAOC,GAEtChB,MAAMe,GACHd,KAAK,SAAAC,GAEJ,IAAMkD,EAAclD,EAASmD,QAAQC,IAAI,gBAEnB,MAApBpD,EAASqD,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5CvC,UAAUC,cAAcuC,MAAMxD,KAAK,SAAAmB,GACjCA,EAAasC,aAAazD,KAAK,WAC7BS,OAAOC,SAASgD,aAKpB7C,EAAgBC,EAAOC,KAG1BX,MAAM,WACLqB,QAAQC,IACN,mEArFAiC,CAAwB7C,EAAOC,GAI/BC,UAAUC,cAAcuC,MAAMxD,KAAK,WACjCyB,QAAQC,IACN,gHAMJb,EAAgBC,EAAOC,MC1B/BE","file":"static/js/main.809599a5.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({id, name, email}) => {\r\n  return (\r\n    <div className=\"bg-light-green dib pa3 br3 ma2 grow bw2 shadow-5\">\r\n      <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>  \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n  const cardsArray = robots.map(robot => {\r\n    return (\r\n      <Card\r\n        key={robot.id}\r\n        id={robot.id}\r\n        name={robot.name}\r\n        email={robot.email}\r\n      />\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      {cardsArray}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n  return (\r\n    <div className='pa2'>\r\n      <input\r\n        aria-label='Search Robots'\r\n        className='pa3 ba b--green bg-lightest-blue'\r\n        type='search'\r\n        placeholder='search robots'\r\n        onChange={searchChange}\r\n      />\r\n    </div>    \r\n  );\r\n};\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div style={{\r\n      overflow: 'scroll',\r\n      border: '3px solid black',\r\n      height: '800px'\r\n    }}>\r\n      {props.children}\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasError: false\r\n    }\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    this.setState({ hasError: true })\r\n  }\r\n\r\n  render() {\r\n    const { hasError } = this.state;\r\n    if(hasError) {\r\n      return <h1>Ooops... What the fuck...</h1>\r\n    }\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundry;","import React, { Component } from 'react';\r\n\r\nclass CounterButton extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      count: 0\r\n    }\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    if (this.state.count !== nextState.count) {\r\n      return true\r\n    }\r\n    return false\r\n  }\r\n\r\n  updateCount = () => {\r\n    this.setState(state => {\r\n      return { count: state.count + 1 }\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <button\r\n        color={this.props.color}\r\n        onClick={this.updateCount}\r\n      >\r\n        Count: {this.state.count}\r\n      </button>\r\n    )\r\n  }\r\n}\r\n\r\nexport default CounterButton;","import React, { Component } from 'react';\r\nimport CounterButton from './CounterButton';\r\n\r\nclass Header extends Component {\r\n  render() {\r\n    return (\r\n      <div>    \r\n        <h1>RoboFriends</h1>\r\n        <CounterButton color={'red'} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Header;","import React, {Component} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport Header from '../components/Header';\r\nimport './App.css';\r\n\r\nimport { setSearchField, requestRobots } from '../actions';\r\n\r\nclass App extends Component {\r\n  componentDidMount() {\r\n    this.props.onRequestRobots();\r\n  }\r\n\r\n  render() {\r\n    const { \r\n      searchField,\r\n      onSearchChange,\r\n      robots,\r\n      isPending,\r\n      error\r\n    } = this.props;\r\n\r\n    const filteredRobots = robots.length ? robots.filter(robot => {\r\n      return robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n    }) : [];\r\n\r\n    return (\r\n        <div className='tc'>\r\n          <Header />\r\n          <SearchBox\r\n            searchChange={onSearchChange}\r\n          />\r\n          <Scroll>\r\n            {isPending \r\n              ? <h1>Loading...</h1>\r\n              :\r\n              <ErrorBoundry>\r\n                <CardList robots={filteredRobots} />\r\n              </ErrorBoundry>\r\n            }           \r\n          </Scroll>\r\n        </div>\r\n    )\r\n  }   \r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    searchField: state.searchRobots.searchField,\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending,\r\n    error: state.requestRobots.error\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onSearchChange: event => dispatch(setSearchField(event.target.value.trim())),\r\n    onRequestRobots: () => dispatch(requestRobots())\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\nexport const setSearchField = text => ({\r\n  type: CHANGE_SEARCH_FIELD,\r\n  payload: text\r\n})\r\n\r\nexport const requestRobots = () => dispatch => {\r\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n  fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then(response => response.json())\r\n      .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n      .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import { \r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\nconst initialStateSearch = {\r\n  searchField: '',\r\n  \r\n}\r\n\r\nconst initialStateRobots = {\r\n  robots: [],\r\n  isPending: false,\r\n  error: ''\r\n}\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n  switch(action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      return {\r\n        ...state,\r\n        searchField: action.payload\r\n      }\r\n    \r\n    default:\r\n      return {\r\n        ...state\r\n      }  \r\n  }\r\n}\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n  switch(action.type) {\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return {\r\n        ...state,\r\n        isPending: true\r\n      }\r\n\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n        return {\r\n          ...state,\r\n          robots: action.payload,\r\n          isPending: false\r\n        }\r\n    \r\n    case REQUEST_ROBOTS_FAILED:\r\n          return {\r\n            ...state,\r\n            robots: action.payload,\r\n            isPending: false\r\n          }\r\n    \r\n    default:\r\n      return {\r\n        ...state\r\n      }  \r\n  }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider, connect } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\nimport './index.css';\nimport App from './containers/App';\nimport 'tachyons';\nimport { searchRobots, requestRobots } from './reducers';\nimport * as serviceWorker from './serviceWorker';\n\nconst logger = createLogger();\nconst rootReducers = combineReducers({searchRobots, requestRobots});\nconst store = createStore(rootReducers, applyMiddleware(thunkMiddleware));\n\nReactDOM.render(\n<Provider store={store}>\n  <App />\n</Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}